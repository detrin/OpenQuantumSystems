var documenterSearchIndex = {"docs":
[{"location":"tutorials/A/#","page":"A site","title":"A site","text":"CurrentModule=OpenQuantumSystems","category":"page"},{"location":"tutorials/A/#A-site-1","page":"A site","title":"A site","text":"","category":"section"},{"location":"tutorials/A/#","page":"A site","title":"A site","text":"Example Julia package repo.","category":"page"},{"location":"tutorials/A/#","page":"A site","title":"A site","text":"Modules = [OpenQuantumSystems]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule=OpenQuantumSystems","category":"page"},{"location":"#Example-1","page":"Home","title":"Example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Example Julia package repo.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [OpenQuantumSystems]","category":"page"},{"location":"#OpenQuantumSystems.schroedinger-Union{Tuple{T}, Tuple{B}, Tuple{T, Array, AbstractOperator{B, B}}} where {B<:Basis, T<:Union{AbstractOperator{B, B}, StateVector{B, T} where T<:(AbstractVector{T} where T)}}","page":"Home","title":"OpenQuantumSystems.schroedinger","text":"schroedinger(tspan, psi0, H; fout)\n\nIntegrate Schroedinger equation to evolve states or compute propagators.\n\nArguments\n\npsi0: Initial state vector (can be a bra or a ket) or initial propagator.\nH: Arbitrary operator specifying the Hamiltonian.\ntspan: Vector specifying the points of time for which output should be displayed.\nfout=nothing: If given, this function fout(t, psi) is called every time       an output should be displayed. ATTENTION: The state psi is neither       normalized nor permanent! It is still in use by the ode solver and       therefore must not be changed.\n\n\n\n\n\n","category":"method"},{"location":"#OpenQuantumSystems.schroedinger_dynamic-Union{Tuple{T}, Tuple{T, Array, Function}} where T<:Union{AbstractOperator, StateVector}","page":"Home","title":"OpenQuantumSystems.schroedinger_dynamic","text":"schroedinger_dynamic(tspan, psi0, f; fout)\n\nIntegrate time-dependent Schroedinger equation to evolve states or compute propagators.\n\nArguments\n\ntspan: Vector specifying the points of time for which output should be displayed.\npsi0: Initial state vector (can be a bra or a ket) or initial propagator.\nf: Function f(t, psi) -> H returning the time and or state dependent Hamiltonian.\nfout=nothing: If given, this function fout(t, psi) is called every time       an output should be displayed. ATTENTION: The state psi is neither       normalized nor permanent! It is still in use by the ode solver and       therefore must not be changed.\n\n\n\n\n\n","category":"method"},{"location":"#OpenQuantumSystems.integrate-Union{Tuple{X}, Tuple{T}, Tuple{Any, Function, X, T, T, Function}} where {T, X}","page":"Home","title":"OpenQuantumSystems.integrate","text":"integrate(tspan, df::Function, x0::Vector{ComplexF64},\n        state::T, dstate::T, fout::Function; kwargs...)\n\nIntegrate using OrdinaryDiffEq\n\n\n\n\n\n","category":"method"},{"location":"#OpenQuantumSystems.@skiptimechecks-Tuple{Any}","page":"Home","title":"OpenQuantumSystems.@skiptimechecks","text":"@skiptimechecks\n\nMacro to skip checks during time-dependent problems. Useful for master_dynamic and similar functions.\n\n\n\n\n\n","category":"macro"},{"location":"tutorials/B/#","page":"B site","title":"B site","text":"CurrentModule=OpenQuantumSystems","category":"page"},{"location":"tutorials/B/#B-site-1","page":"B site","title":"B site","text":"","category":"section"},{"location":"tutorials/B/#","page":"B site","title":"B site","text":"Example Julia package repo.","category":"page"},{"location":"tutorials/B/#","page":"B site","title":"B site","text":"Modules = [OpenQuantumSystems]","category":"page"}]
}
